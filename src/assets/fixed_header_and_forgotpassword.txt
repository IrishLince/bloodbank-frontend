header.jsx

'use client'

import React, { useState, useEffect } from 'react';
import { Menu, X, UserCircle2, Settings, LogOut, User, Mail } from 'lucide-react';
import { Link, useLocation, useNavigate } from 'react-router-dom';
import logo from '../assets/Logo.png';

const ProfileDropdown = ({ onLogout, userData }) => {
  const [isOpen, setIsOpen] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (isOpen && !event.target.closest('.profile-dropdown')) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [isOpen]);

  return (
    <div className="relative profile-dropdown">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center justify-center w-10 h-10 rounded-full hover:bg-gray-100 transition-colors duration-200"
      >
        <UserCircle2 className="w-8 h-8 text-white hover:text-gray-200" />
      </button>

      {isOpen && (
        <div className="absolute right-0 mt-2 w-72 bg-white rounded-lg shadow-lg border border-gray-200 py-2">
          <div className="px-4 py-3 border-b border-gray-200">
            <div className="flex items-center space-x-3">
              <div className="w-12 h-12 rounded-full bg-gray-100 flex items-center justify-center">
                <UserCircle2 className="w-8 h-8 text-gray-600" />
              </div>
              <div className="flex-1 min-w-0">
                <div className="flex items-center space-x-1 text-sm text-gray-600 mb-1">
                  <User className="w-4 h-4" />
                  <span className="truncate">{userData.username}</span>
                </div>
                <div className="flex items-center space-x-1 text-sm text-gray-600">
                  <Mail className="w-4 h-4" />
                  <span className="truncate">{userData.email}</span>
                </div>
              </div>
            </div>
          </div>

          <div className="py-2">
            <button
              onClick={() => navigate('/profile-page')}
              className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
            >
              <User className="w-4 h-4" />
              <span>Profile Settings</span>
            </button>

            <button
              onClick={() => navigate('/settings')}
              className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
            >
              <Settings className="w-4 h-4" />
              <span>Settings</span>
            </button>

            <div className="border-t border-gray-200 my-2"></div>

            <button
              onClick={onLogout}
              className="w-full px-4 py-2 text-left text-sm text-red-600 hover:bg-red-50 flex items-center space-x-2"
            >
              <LogOut className="w-4 h-4" />
              <span>Logout</span>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

const NavLink = ({ to, children, isAuthenticated, isActive }) => {
  return (
    <Link
      to={to}
      className={`
        px-4 py-2 rounded-lg transition-all duration-300
        ${isAuthenticated
          ? isActive
            ? "bg-white text-red-600 font-semibold"
            : "text-white hover:bg-white/20"
          : isActive
            ? "bg-white text-red-600 font-semibold"
            : "text-white hover:bg-white/20"
        }
      `}
    >
      {children}
    </Link>
  );
};

const Header = () => {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [userRole, setUserRole] = useState('');
  const [isVisible, setIsVisible] = useState(true);
  const [lastScrollPos, setLastScrollPos] = useState(0);
  const location = useLocation();
  const navigate = useNavigate();

  useEffect(() => {
    const handleScroll = () => {
      const currentScrollPos = window.scrollY;
      const isScrollingUp = currentScrollPos < lastScrollPos;
      const isAtTop = currentScrollPos === 0;
      
      setIsVisible(isScrollingUp || isAtTop);
      setLastScrollPos(currentScrollPos);
    };

    window.addEventListener('scroll', handleScroll, { passive: true });
    return () => window.removeEventListener('scroll', handleScroll);
  }, [lastScrollPos]);

  useEffect(() => {
    const checkAuth = () => {
      const token = localStorage.getItem('userToken');
      const role = localStorage.getItem('userRole');
      setIsAuthenticated(!!token);
      setUserRole(role || '');
    };

    checkAuth();
    window.addEventListener('storage', checkAuth);

    return () => {
      window.removeEventListener('storage', checkAuth);
    };
  }, []);

  useEffect(() => {
    const handlePopState = () => {
      const token = localStorage.getItem('userToken');
      const role = localStorage.getItem('userRole');
      setIsAuthenticated(!!token);
      setUserRole(role || '');
    };

    window.addEventListener('popstate', handlePopState);
    return () => {
      window.removeEventListener('popstate', handlePopState);
    };
  }, []);

  const hideHeaderPaths = ['/login', '/signup'];
  if (hideHeaderPaths.includes(location.pathname)) {
    return null;
  }

  const handleLogout = () => {
    localStorage.removeItem('userToken');
    localStorage.removeItem('username');
    localStorage.removeItem('email');
    localStorage.removeItem('userRole');
    setIsAuthenticated(false);
    setUserRole('');
    navigate('/homepage');
  };

  const Donor = () => (
    <>
      <NavLink to="/successful-login" isAuthenticated={isAuthenticated} isActive={location.pathname === '/successful-login'}>Home</NavLink>
      <NavLink to="/donation-center" isAuthenticated={isAuthenticated} isActive={location.pathname === '/donation-center'}>Online Booking</NavLink>
      <NavLink to="/about-us" isAuthenticated={isAuthenticated} isActive={location.pathname === '/about-us'}>About Us</NavLink>
    </>
  );

  const HospitalAdmin = () => (
    <>
      <NavLink to="/successful-login" isAuthenticated={isAuthenticated} isActive={location.pathname === '/successful-login'}>Home</NavLink>
      <NavLink to="/hospital" isAuthenticated={isAuthenticated} isActive={location.pathname === '/hospital'}>Requests</NavLink>
      <NavLink to="/about-us" isAuthenticated={isAuthenticated} isActive={location.pathname === '/about-us'}>About Us</NavLink>
    </>
  );

  // Home / Hospitals Abouts

  const LoggedOutLinks = () => (
    <>
      <NavLink to="/homepage" isAuthenticated={isAuthenticated} isActive={location.pathname === '/homepage'}>Home</NavLink>
      <NavLink to="/faqs" isAuthenticated={isAuthenticated} isActive={location.pathname === '/faqs'}>FAQs</NavLink>
      <NavLink to="/about-us" isAuthenticated={isAuthenticated} isActive={location.pathname === '/about-us'}>About Us</NavLink>
      <div className="flex gap-2">
        <Link
          to="/signup"
          className="px-4 py-2 rounded-lg bg-white text-red-600 hover:bg-red-50 transition-colors duration-300"
        >
          Sign Up
        </Link>
        <Link
          to="/login"
          className="px-4 py-2 rounded-lg bg-white/10 text-white hover:bg-white/20 transition-colors duration-300"
        >
          Log In
        </Link>
      </div>
    </>
  );

  const userData = {
    username: localStorage.getItem('username') || 'User',
    email: localStorage.getItem('email') || 'user@example.com',
  };

  return (
    <header 
     className={`
      fixed top-0 left-0 w-full
      z-50 
      transition-all duration-300 
      ${isVisible ? 'translate-y-0' : '-translate-y-full'}
      ${isAuthenticated ? 'bg-red-600' : 'bg-red-600'} 
      shadow-lg
      h-16
     `}
    >
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between">
          <div className="flex-shrink-0">
            <Link to={isAuthenticated ? '/successful-login' : '/homepage'}>
              <div className="w-10 h-10 flex items-center justify-center">
                <img src={logo} alt="Logo" className="w-8 h-8 object-contain" />
              </div>
            </Link>
          </div>

          <nav className="hidden md:flex items-center space-x-2">
            {!isAuthenticated ? <LoggedOutLinks /> : 
             userRole === 'admin' ? <HospitalAdmin /> : <Donor />}
          </nav>

          {isAuthenticated && (
            <div className="hidden md:block">
              <ProfileDropdown onLogout={handleLogout} userData={userData} />
            </div>
          )}

          <button
            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}
            className="md:hidden rounded-lg p-2 hover:bg-red-700 transition-colors duration-300"
            aria-label="Toggle menu"
          >
            {isMobileMenuOpen ? (
              <X className="h-6 w-6 text-white" />
            ) : (
              <Menu className="h-6 w-6 text-white" />
            )}
          </button>
        </div>

        {isMobileMenuOpen && (
          <div className="md:hidden bg-red-600 border-t border-red-700">
            <nav className="flex flex-col space-y-1 px-2 pb-3 pt-2">
              {!isAuthenticated ? <LoggedOutLinks /> : 
               userRole === 'admin' ? <HospitalAdmin /> : <Donor />}
              {isAuthenticated && (
                <button
                  onClick={handleLogout}
                  className="flex items-center space-x-2 px-4 py-2 text-white hover:bg-red-700 rounded-lg"
                >
                  <LogOut className="w-4 h-4" />
                  <span>Logout</span>
                </button>
              )}
            </nav>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;


Forgotpassword.jsx

import React, { useState, useEffect } from 'react';
import { IoArrowBack } from "react-icons/io5";
import flagLogo from '../assets/Logophonenumber.png';
import cover from '../assets/cover.png';
import { useNavigate } from 'react-router-dom';

const ForgotPassword = ({ setIsLogin, setIsForgotPassword }) => {
  const [step, setStep] = useState(1);
  const navigate = useNavigate();
  const [phoneNumber, setPhoneNumber] = useState('');
  const [verificationCode, setVerificationCode] = useState('');
  const [countdown, setCountdown] = useState(30);
  const [canResend, setCanResend] = useState(true);
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [passwordError, setPasswordError] = useState('');

  useEffect(() => {
    let timer;
    if (!canResend && countdown > 0) {
      timer = setInterval(() => {
        setCountdown((prev) => prev - 1);
      }, 1000);
    }
    if (countdown === 0) {
      setCanResend(true);
      setCountdown(60);
    }
    return () => clearInterval(timer);
  }, [canResend, countdown]);

  const validatePasswords = () => {
    if (newPassword.length < 8) {
      setPasswordError('Password must be at least 8 characters long');
      return false;
    }
    if (!/(?=.*[A-Z])/.test(newPassword)) {
      setPasswordError('Password must contain at least one uppercase letter');
      return false;
    }
    if (!/(?=.*[0-9])/.test(newPassword)) {
      setPasswordError('Password must contain at least one number');
      return false;
    }
    if (!/(?=.*[!@#$%^&*])/.test(newPassword)) {
      setPasswordError('Password must contain at least one special character (!@#$%^&*)');
      return false;
    }
    if (newPassword !== confirmPassword) {
      setPasswordError('Passwords do not match');
      return false;
    }
    setPasswordError('');
    return true;
  };

  const handleSendCode = (e) => {
    e.preventDefault();
    setStep(3);
  };

  const handleResendCode = () => {
    if (canResend) {
      setCanResend(false);
      setCountdown(60);
    }
  };

  const handleVerifyCode = (e) => {
    e.preventDefault();
    setStep(4);
  };

  const handlePasswordSubmit = (e) => {
    e.preventDefault();
    if (validatePasswords()) {
      setStep(5);
    }
  };

  const handleBack = () => {
    if (step > 1) {
      setStep(step - 1);
    } else {
      navigate('/login');
    }
  };

  const handleContinue = () => {
    navigate('/login');
  };

  const backgroundStyle = {
    backgroundImage: `url(${cover})`,
    backgroundSize: 'cover',
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
  };

  return (
    <div className="min-h-screen w-full flex items-center justify-center" style={backgroundStyle}>
      <div className="w-full max-w-md p-6 bg-pink-50 rounded-3xl shadow-xl mx-4">
        {step !== 5 && (
          <button
            onClick={handleBack}
            className="text-gray-800 mb-6 flex items-center hover:text-gray-600 transition-colors"
            aria-label="Go back"
          >
            <IoArrowBack size={24} />
          </button>
        )}

        {step < 4 && (
          <h1 className="text-2xl font-bold text-gray-800 mb-2">
            {step === 3 ? 'Enter Verification Code' : 'Forgot your password?'}
          </h1>
        )}

        {step === 3 && (
          <>
            <p className="text-gray-600 text-sm mb-6">
              A verification code has been sent to your contact number +63 9674324289.
              Please enter the code below to reset your password.
            </p>
            <form onSubmit={handleVerifyCode} className="space-y-6">
              <div>
                <input
                  type="text"
                  value={verificationCode}
                  onChange={(e) => setVerificationCode(e.target.value)}
                  className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                  placeholder="Enter verification code"
                />
              </div>
              {!canResend && (
                <p className="text-sm text-gray-600 mt-2">
                  You can request a new code in {countdown} seconds.
                </p>
              )}
              <button
                type="submit"
                className="w-full bg-red-600 text-white py-3 rounded-lg font-medium hover:bg-red-700 transition-colors"
              >
                VERIFY CODE
              </button>
            </form>
            <button
              onClick={handleResendCode}
              className={`w-full text-center mt-4 text-sm ${canResend ? 'text-red-600 hover:text-red-700' : 'text-gray-400'}`}
              disabled={!canResend}
            >
              <span className="text-red-600">Didn't receive the code?</span>{' '}
              <strong className={`${canResend ? 'text-red-600' : 'text-gray-400'}`}>Resend Code.</strong>
            </button>
          </>
        )}

        {step === 4 && (
          <>
            <h1 className="text-2xl font-bold text-gray-800 mb-2">Create New Password</h1>
            <form onSubmit={handlePasswordSubmit} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  New Password <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <input
                    type="password"
                    value={newPassword}
                    onChange={(e) => {
                      setNewPassword(e.target.value);
                      setPasswordError('');
                    }}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                    placeholder="Enter password"
                  />
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  Password must contain at least 8 characters, one uppercase letter, one number, and one special character.
                </p>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Confirm your new password <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <input
                    type="password"
                    value={confirmPassword}
                    onChange={(e) => {
                      setConfirmPassword(e.target.value);
                      setPasswordError('');
                    }}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                    placeholder="Enter password"
                  />
                </div>
              </div>
              {passwordError && (
                <p className="text-red-500 text-sm">{passwordError}</p>
              )}
              <button
                type="submit"
                className="w-full bg-red-600 text-white py-3 rounded-lg font-medium hover:bg-red-700 transition-colors"
              >
                CONFIRM
              </button>
            </form>
          </>
        )}

        {step === 5 && (
          <div className="text-center">
            <h1 className="text-2xl font-bold text-gray-800 mb-4">Password Reset Successful!</h1>
            <div className="w-16 h-16 mx-auto mb-4 bg-red-100 rounded-full flex items-center justify-center">
              <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <p className="text-gray-600 mb-2">You have successfully reset your password.</p>
            <p className="text-gray-600 mb-6">You can now log in with your new password.</p>
            <button
              onClick={handleContinue}
              className="w-full bg-red-600 text-white py-3 rounded-lg font-medium hover:bg-red-700 transition-colors"
            >
              CONTINUE
            </button>
          </div>
        )}

        {step === 1 && (
          <>
            <p className="text-gray-600 text-sm mb-6">
              Enter your registered contact number to receive a password reset code.
            </p>
            <form onSubmit={handleSendCode} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Contact Number <span className="text-red-500">*</span>
                </label>
                <div className="relative">
                  <img
                    src={flagLogo}
                    alt="PH flag"
                    className="absolute left-3 top-1/2 -translate-y-1/2 w-6 h-4"
                  />
                  <input
                    type="tel"
                    value={phoneNumber}
                    onChange={(e) => setPhoneNumber(e.target.value)}
                    className="w-full pl-12 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-red-500"
                    placeholder="Enter contact number"
                  />
                </div>
              </div>
              <button
                type="submit"
                className="w-full bg-red-600 text-white py-3 rounded-lg font-medium hover:bg-red-700 transition-colors"
              >
                SEND CODE
              </button>
            </form>
          </>
        )}
      </div>
    </div>
  );
};

export default ForgotPassword;